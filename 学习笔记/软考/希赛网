【1】State设计模式，
表面看起来，一个大对象会有，不同的行为输入同一个程序，会得到不同的结果。即内部的变化而变化。
内部状态改变

混淆：将请求封装为对象，从而可以使用不同的请求对客户进行参数化。结果区别应该是多个接口函数。

客户程序的主要接口，用的是表层函数，而State（）再下面一些。

【2】自底向上、自顶向下
优缺点
自顶向下
较早验证业务逻辑，主要控制和判断点、功能
只需要一个驱动，减少驱动器的开发费用，故障隔离？

桩程序开发量大；
底层验证迟

适用于产品控制结构比较清晰和稳定；希望尽早看到产品的系统功能行为。
高层接口变化小；底层接口未定义或经常修改。风险大。


自底向上
较早验证底层组建。
效率较高
并行集成？
减少桩 故障隔离+1

驱动开发量大，高层验证，接口变化。


【3】瀑布 原型 增量 螺旋


【4】软件维护
    软件维护的分类
    在系统运行过程中，软件需要维护的原因是多样的，根据维护的原因不同，可以将软件维护分为以下四种：
    （1）改正性/正确性维护。为了识别和纠正软件错误、改正软件性能上的缺陷、排除实施中的误使用，应当进行的诊断和改正错误的过程就称为改正性维护。
    （2）适应性维护。在使用过程中，外部环境（新的硬、软件配置）、数据环境（数据库、数据格式、数据输入/输出方式、数据存储介质）可能发生变化。为使软件适应这种变化，而去修改软件的过程就称为适应性维护。
    （3）完善性维护。在软件的使用过程中，用户往往会对软件提出新的功能与性能要求。为了满足这些要求，需要修改或再开发软件，以扩充软件功能、增强软件性能、改进加工效率、提高软件的可维护性。这种情况下进行的维护活动称为完善性维护。
    （4）预防性维护。这是指预先提高软件的可维护性、可靠性等，为以后进一步改进软件打下良好基础。通常，预防性维护可定义为“把今天的方法学用于昨天的系统以满足明天的需要”。也就是说，采用先进的软件工程方法对需要维护的软件或软件中的某一部分（重新）进行设计、编码和测试。
    要注意，国家标准《软件维护指南》（GB/T 14079-1993）将软件维护分为改正性维护、适应性维护和完善性维护三种类型。
    
    防错性的程序设计，可以减少在系统运行时发生错误，有效地控制正确性维护的成本。

【5】与 或 同或 异或
同或 相同的为1           
异或 不同的为1     01上溢 10下溢       溢出时对两个符号位进行异或运算，结果为1

【6】模块化
模块的内聚性表现了模块内部各个子成分功能的集中程度，分为6级

偶然内聚 逻辑内聚 时间内据 通信内聚 顺序内聚 功能内聚
----------------------------------------------->
内聚性低                                 内聚性搞



【7】UML
聚合 泛化 传递？ 迭代？
组合 


【8】选择语言开发
可以选择将来是否能够占据市场主导地位

全局变量和全局函数不是一种很好的程序设计风格
有些已经放弃支持


